// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Bid extends ethereum.Event {
  get params(): Bid__Params {
    return new Bid__Params(this);
  }
}

export class Bid__Params {
  _event: Bid;

  constructor(event: Bid) {
    this._event = event;
  }

  get namehash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get tranche(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get namehash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Sponsored extends ethereum.Event {
  get params(): Sponsored__Params {
    return new Sponsored__Params(this);
  }
}

export class Sponsored__Params {
  _event: Sponsored;

  constructor(event: Sponsored) {
    this._event = event;
  }

  get namehash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get started(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sponsor(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get checkpoint(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Governance extends ethereum.SmartContract {
  static bind(address: Address): Governance {
    return new Governance("Governance", address);
  }

  airdropReward(): BigInt {
    let result = super.call("airdropReward", "airdropReward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_airdropReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "airdropReward",
      "airdropReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctions(param0: Bytes): BigInt {
    let result = super.call("auctions", "auctions(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_auctions(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("auctions", "auctions(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkpoints(param0: Bytes): BigInt {
    let result = super.call("checkpoints", "checkpoints(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_checkpoints(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkpoints",
      "checkpoints(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claims(param0: Bytes, param1: Address): boolean {
    let result = super.call("claims", "claims(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBoolean();
  }

  try_claims(param0: Bytes, param1: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("claims", "claims(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
      ethereum.Value.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC721Received(
    param0: Address,
    from: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    from: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerCredits(): BigInt {
    let result = super.call("ownerCredits", "ownerCredits():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ownerCredits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ownerCredits", "ownerCredits():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sponsorReward(): BigInt {
    let result = super.call("sponsorReward", "sponsorReward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sponsorReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sponsorReward",
      "sponsorReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sponsors(param0: Bytes): Address {
    let result = super.call("sponsors", "sponsors(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_sponsors(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("sponsors", "sponsors(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  startTime(): BigInt {
    let result = super.call("startTime", "startTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startTime", "startTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  trancheReward(): BigInt {
    let result = super.call("trancheReward", "trancheReward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_trancheReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "trancheReward",
      "trancheReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tranches(param0: Bytes, param1: BigInt): BigInt {
    let result = super.call("tranches", "tranches(bytes32,uint256):(uint256)", [
      ethereum.Value.fromFixedBytes(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBigInt();
  }

  try_tranches(param0: Bytes, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tranches",
      "tranches(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sponsorshipCost(): BigInt {
    let result = super.call(
      "sponsorshipCost",
      "sponsorshipCost():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_sponsorshipCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sponsorshipCost",
      "sponsorshipCost():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentTranche(namehash: Bytes): BigInt {
    let result = super.call(
      "currentTranche",
      "currentTranche(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(namehash)]
    );

    return result[0].toBigInt();
  }

  try_currentTranche(namehash: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentTranche",
      "currentTranche(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(namehash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trancheBids(namehash: Bytes, tranche: BigInt): BigInt {
    let result = super.call(
      "trancheBids",
      "trancheBids(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(namehash),
        ethereum.Value.fromUnsignedBigInt(tranche)
      ]
    );

    return result[0].toBigInt();
  }

  try_trancheBids(
    namehash: Bytes,
    tranche: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "trancheBids",
      "trancheBids(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(namehash),
        ethereum.Value.fromUnsignedBigInt(tranche)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trancheBidsFor(namehash: Bytes, tranche: BigInt, account: Address): BigInt {
    let result = super.call(
      "trancheBidsFor",
      "trancheBidsFor(bytes32,uint256,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(namehash),
        ethereum.Value.fromUnsignedBigInt(tranche),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_trancheBidsFor(
    namehash: Bytes,
    tranche: BigInt,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "trancheBidsFor",
      "trancheBidsFor(bytes32,uint256,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(namehash),
        ethereum.Value.fromUnsignedBigInt(tranche),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  payoutFor(namehash: Bytes, account: Address): BigInt {
    let result = super.call(
      "payoutFor",
      "payoutFor(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(namehash),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_payoutFor(
    namehash: Bytes,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "payoutFor",
      "payoutFor(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(namehash),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  airdropRewardFor(namehash: Bytes, account: Address): BigInt {
    let result = super.call(
      "airdropRewardFor",
      "airdropRewardFor(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(namehash),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_airdropRewardFor(
    namehash: Bytes,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "airdropRewardFor",
      "airdropRewardFor(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(namehash),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimFor(namehash: Bytes, account: Address): BigInt {
    let result = super.call("claimFor", "claimFor(bytes32,address):(uint256)", [
      ethereum.Value.fromFixedBytes(namehash),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_claimFor(namehash: Bytes, account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimFor",
      "claimFor(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(namehash),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claim(namehash: Bytes): BigInt {
    let result = super.call("claim", "claim(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(namehash)
    ]);

    return result[0].toBigInt();
  }

  try_claim(namehash: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claim", "claim(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(namehash)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetTokenCall extends ethereum.Call {
  get inputs(): SetTokenCall__Inputs {
    return new SetTokenCall__Inputs(this);
  }

  get outputs(): SetTokenCall__Outputs {
    return new SetTokenCall__Outputs(this);
  }
}

export class SetTokenCall__Inputs {
  _call: SetTokenCall;

  constructor(call: SetTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTokenCall__Outputs {
  _call: SetTokenCall;

  constructor(call: SetTokenCall) {
    this._call = call;
  }
}

export class StartCall extends ethereum.Call {
  get inputs(): StartCall__Inputs {
    return new StartCall__Inputs(this);
  }

  get outputs(): StartCall__Outputs {
    return new StartCall__Outputs(this);
  }
}

export class StartCall__Inputs {
  _call: StartCall;

  constructor(call: StartCall) {
    this._call = call;
  }
}

export class StartCall__Outputs {
  _call: StartCall;

  constructor(call: StartCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class SponsorCall extends ethereum.Call {
  get inputs(): SponsorCall__Inputs {
    return new SponsorCall__Inputs(this);
  }

  get outputs(): SponsorCall__Outputs {
    return new SponsorCall__Outputs(this);
  }
}

export class SponsorCall__Inputs {
  _call: SponsorCall;

  constructor(call: SponsorCall) {
    this._call = call;
  }

  get label(): string {
    return this._call.inputValues[0].value.toString();
  }

  get note(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SponsorCall__Outputs {
  _call: SponsorCall;

  constructor(call: SponsorCall) {
    this._call = call;
  }
}

export class OwnerSponsorCall extends ethereum.Call {
  get inputs(): OwnerSponsorCall__Inputs {
    return new OwnerSponsorCall__Inputs(this);
  }

  get outputs(): OwnerSponsorCall__Outputs {
    return new OwnerSponsorCall__Outputs(this);
  }
}

export class OwnerSponsorCall__Inputs {
  _call: OwnerSponsorCall;

  constructor(call: OwnerSponsorCall) {
    this._call = call;
  }

  get label(): string {
    return this._call.inputValues[0].value.toString();
  }

  get note(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class OwnerSponsorCall__Outputs {
  _call: OwnerSponsorCall;

  constructor(call: OwnerSponsorCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get namehash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class ClaimForCall extends ethereum.Call {
  get inputs(): ClaimForCall__Inputs {
    return new ClaimForCall__Inputs(this);
  }

  get outputs(): ClaimForCall__Outputs {
    return new ClaimForCall__Outputs(this);
  }
}

export class ClaimForCall__Inputs {
  _call: ClaimForCall;

  constructor(call: ClaimForCall) {
    this._call = call;
  }

  get namehash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimForCall__Outputs {
  _call: ClaimForCall;

  constructor(call: ClaimForCall) {
    this._call = call;
  }

  get total(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get namehash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
